const { exiftool } = require("exiftool-vendored");
const { padStart } = require("lodash");
const AWS = require("aws-sdk");
const s3 = new AWS.S3();
const rekognitionClient = new AWS.Rekognition({
  region: "us-east-1",
});
const fs = require("fs");

async function writeMetadataOnImage(imagePath, numbers) {
  let finalTags = Array.from(new Set(numbers));

  let originalTags = await exiftool.read(imagePath, ["-keywords"]);
  originalTags = originalTags.Keywords ?? [];
  if (typeof originalTags === 'string') {
    originalTags = originalTags.split(',');
  } else if (typeof originalTags === 'array') {
    originalTags = originalTags.map((tag) => tag.trim());
  }
  console.log("originalTags: ", originalTags);

  originalTags.map((tag) => {
    if (!finalTags.includes(tag)) {
      finalTags.push(tag);
    }
  });

  if (!finalTags.length) {
    finalTags = ["#"];
  } else {
    finalTags = finalTags.map((number) => {
      return number === '#' ? number : padStart(String(number), 5, "0");
    });
  }
  console.log("finalTags: ", finalTags);

  await exiftool.write(imagePath, { Keywords: [...finalTags] }, [
    "-overwrite_original",
  ]);
}

const useRegex = (input) => {
  let regex = /^[0-9]+$/i;
  return regex.test(input);
};

async function deleteObjectFromS3(bucketName, objectKey) {
  try {
    await s3
      .deleteObject({
        Bucket: bucketName,
        Key: objectKey,
      })
      .promise();
    console.log(`Deleted object ${objectKey} from bucket ${bucketName}`);
  } catch (err) {
    console.error(
      `Error deleting object ${objectKey} from bucket ${bucketName}: `,
      err
    );
  }
}

async function rekognize(imageBytes, bannedNumbers) {
  try {
    const params = {
      Image: {
        Bytes: imageBytes,
      },
      Filters: {
        WordFilter: {
          MinConfidence: 95,
        },
      },
    };
    const commandResult = await rekognitionClient.detectText(params).promise();
    let numbersArray = commandResult.TextDetections.filter((textDetection) =>
      useRegex(textDetection.DetectedText)
    ).map((textDetection) => textDetection.DetectedText);
    // Remove duplicated numbers as well as the banned numbers from the result
    numbersArray = Array.from(new Set(numbersArray));
    numbersArray = numbersArray.map(Number);
    numbersArray = numbersArray.filter(
      (number) => !bannedNumbers.includes(number)
    );
    // Format numbers accordingly for labeling that meets photomechanic criteria
    if (!numbersArray.length) {
      numbersArray = ["#"];
    } else {
      numbersArray = numbersArray.map((number) =>
        padStart(String(number), 5, "0")
      );
    }
    return numbersArray;
  } catch (err) {
    console.error("Error rekognizing an image: ", err);
    // throw new Error("Error rekognizing an image: " + err);
  }
}

function extractFileName(path) {
  // Split the path by '/'
  const parts = path.split("/");
  // Return the last part of the array, which is the file name
  // This file name is a guid generated by edge store
  return parts[parts.length - 1];
}

/*
 * objectKey is like this: publicImages/_public/bannedNumbers=2003,2004,/evento_11/foto_b3b37d95-546a-41c0-bccb-bb2b4cf0303c
 * We want to save it in the upload bucket as evento_11/foto_b3b37d95-546a-41c0-bccb-bb2b4cf0303c
 */
function generateFilename(objectKey) {
  // Split the path by '/'
  const parts = objectKey.split("/");
  return parts[parts.length - 2] + "/" + parts[parts.length - 1];
}

function extractBannedNumbers(objectKey) {
  const parts = objectKey.split("/");
  bannedNumbersString = parts[2];
  // Remove the prefix "bannedNumbers="
  const prefix = "bannedNumbers-";
  const numbersPart = bannedNumbersString.replace(prefix, "");

  // Split the remaining string by underscores
  const numberStrings = numbersPart.split("_");

  // Convert to numbers and filter out any empty strings
  const numbersArray = numberStrings
    .filter((numStr) => numStr !== "")
    .map((numStr) => parseInt(numStr, 10));

  return numbersArray;
}

exports.handler = async (event) => {
  let response = null;
  const objectKey = event.Records[0].s3.object.key;
  console.log("Object Key: ", objectKey);
  try {
    // Obtain the uploaded photo
    response = await s3
      .getObject({ Bucket: process.env.UPLOAD_BUCKET_NAME, Key: objectKey })
      .promise();
  } catch (err) {
    console.error("Error obtaining S3 object: ", err);
  }
  // Obtain the numbers in the photo
  const bannedNumbers = extractBannedNumbers(objectKey);
  console.log("Banned numbers: ", bannedNumbers);
  let numbersArray = await rekognize(response.Body, bannedNumbers);
  console.log("Obtained numbers: ", numbersArray);
  const imageFilePath = "/tmp/" + extractFileName(objectKey);
  console.log("Image File Path: ", imageFilePath);
  try {
    // label the image
    fs.writeFileSync(imageFilePath, response.Body);
    console.log("A tag is being written on the image");
    await writeMetadataOnImage(imageFilePath, numbersArray);
  } catch (err) {
    console.error("Error writing on image metadata with exiftool: ", err);
  }
  try {
    const imageFile = fs.readFileSync(imageFilePath);
    await s3
      .putObject({
        Bucket: process.env.DESTINATION_BUCKET_NAME,
        Key: generateFilename(objectKey),
        Body: imageFile,
        ContentType: "image/jpeg",
      })
      .promise();
    console.log(
      `Uploaded image ${objectKey} to bucket ${process.env.DESTINATION_BUCKET_NAME}`
    );
    fs.unlinkSync(imageFilePath);
  } catch (err) {
    console.error("Error uploading on the destination bucket: ", err);
  }
  // Delete the uploaded photo from upload bucket
  await deleteObjectFromS3(process.env.UPLOAD_BUCKET_NAME, objectKey);
};
